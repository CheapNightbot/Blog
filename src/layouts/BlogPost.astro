---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "../layouts/Layout.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<Layout title={title} description={description} image={heroImage}>
	<article
		class="w-full h-full md:max-w-3xl mx-auto px-4 py-12 md:px-8 lg:px-0"
	>
		<h1
			class="text-xl md:text-4xl font-bold text-foreground text-center leading-tight mb-4"
		>
			{title}
		</h1>
		{
			description && (
				<p class="md:text-lg text-center text-muted-foreground mt-4 mb-8">
					{description}
				</p>
			)
		}
		{/* Hero Image */}
		{
			heroImage && (
				<div class="mb-10 rounded-3xl overflow-hidden shadow-xl ring-1 ring-border">
					<Image
						width={1020}
						height={510}
						src={heroImage}
						alt={title || "Blog post hero image"}
						class="w-full h-auto object-cover transition-transform duration-700 hover:scale-105"
					/>
				</div>
			)
		}

		{/* Metadata & Description */}
		<header class="mb-8">
			<div
				class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 text-muted-foreground mb-4"
			>
				<time>
					✦. Published on:<FormattedDate date={pubDate} />
				</time>
				{
					updatedDate && (
						<div class="flex items-center gap-1">
							<span>Last updated:</span>
							<FormattedDate date={updatedDate} />
							.✦
						</div>
					)
				}
			</div>
			<hr class="my-8 border-border" />
		</header>

		{/* Markdown Content */}
		<div
			class="prose prose-sm md:prose-lg prose-headings:font-bold prose-headings:text-foreground prose-a:text-primary hover:prose-a:underline prose-img:rounded-xl prose-img:shadow-md mx-auto"
		>
			<slot />
			<div class="mt-12 pt-8 border-t border-border text-center">
				<a
					href="/"
					class="!no-underline inline-block px-6 py-3 bg-purple-100 active:scale-95 !text-foreground font-medium rounded-full transition-all"
				>
					Back to all posts !
				</a>
			</div>
		</div>
	</article>
	<div
		id="scroll-indicator"
		class="opacity-0 select-none w-16 h-16 md:w-20 md:h-20 active:scale-95 fixed left-2 bottom-2 grid content-center justify-items-center z-99 transition-opacity duration-300 ease-in-out"
	>
		<div
			id="scroll-bg"
			class="absolute w-full h-full bg-[url('/pastel.svg')] bg-center bg-cover bg-no-repeat hover:scale-95 animate-in slide-in-from-left-5 fade-in duration-1000 ease-in-out"
		>
		</div>
		<p id="scroll-percent" class="z-100 text-xs md:text-base">0%</p>
	</div>
</Layout>

<script>
	const scrollIndicator = document.getElementById("scroll-indicator");
	const scrollBG = document.getElementById("scroll-bg");
	const scrollPercent = document.getElementById("scroll-percent");

	let percent = 0;
	let rotationDeg = 0;

	// Scroll back to top
	scrollIndicator?.addEventListener("click", () => {
		window.scrollTo({ top: 0, behavior: "smooth" });
		updateScrollPercentage();
		scrollIndicator.style.opacity = "0";
	});

	const updateScrollPercentage = () => {
		const scrollTop = window.pageYOffset;
		const docHeight = document.documentElement.scrollHeight;
		const winHeight = window.innerHeight;

		// Guard against division-by-zero on very short pages
		if (docHeight <= winHeight) return;

		percent = Math.floor((scrollTop / (docHeight - winHeight)) * 100);
		rotationDeg = percent * 3.6; // 0-100% -> 0-360deg

		// Show / hide the indicator
		if (scrollIndicator) {
			if (percent > 0) {
				scrollIndicator.style.opacity = "1";
				scrollIndicator.style.cursor = "pointer";
			} else {
				scrollIndicator.style.opacity = "0";
				scrollIndicator.style.cursor = "default";
			}
		}

		// Apply rotation to the scrollBg (i.e. the flower pastel thing)
		// and update the text
		if (scrollBG && scrollPercent) {
			scrollBG.style.transform = `rotate(${rotationDeg}deg)`;
			scrollPercent.textContent = `${percent}%`;
		}
	};

	// Use requestAnimationFrame for smoother updates
	let ticking = false;
	window.addEventListener("scroll", () => {
		if (!ticking) {
			window.requestAnimationFrame(() => {
				updateScrollPercentage();
				ticking = false;
			});
			ticking = true;
		}
	});

	// Run once on page load, so the indicator relfects the initial position
	updateScrollPercentage();
</script>
